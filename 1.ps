<#
.SYNOPSIS
    Performs an expert-level, detailed analysis of a Scalene profile.json file.

.DESCRIPTION
    This script provides a comprehensive and unambiguous breakdown of Scalene performance data.
    - It reads and validates the profile.json file.
    - For each function with recorded activity, it generates a detailed "report card"
      displaying all critical memory, CPU, and copy metrics, preventing any data truncation.
    - It intelligently highlights any non-zero memory growth in red to immediately draw
      attention to potential memory leaks.
    - Finally, it compiles and displays "Top 5" summaries for Memory Growth, Memory Allocation,
      and Total CPU Time, offering both a granular and a high-level view of performance bottlenecks.
#>

# --- 脚本开始 ---

$ErrorActionPreference = "Stop"
$jsonPath = ".\profile_fixed.json"

# --- 1. 读取和验证 JSON 文件 ---
try {
    Write-Host "开始分析，正在读取并验证 `"$jsonPath`"..." -ForegroundColor Cyan
    $jsonContent = Get-Content -Path $jsonPath -Raw
    $profile = $jsonContent | ConvertFrom-Json
}
catch {
    Write-Error "致命错误：无法读取或解析 `"$jsonPath`"。请确保文件存在于当前目录，并且是一个有效的 JSON 文件。"
    return
}

$allFunctions = [System.Collections.Generic.List[object]]::new()
$fileCount = 0

Write-Host "解析成功。正在遍历所有文件和函数，提取详细指标..." -ForegroundColor Cyan

# --- 2. 提取所有函数的详细数据 ---
foreach ($fileProperty in $profile.files.PSObject.Properties) {
    $fileCount++
    $fileName = $fileProperty.Name
    $fileData = $fileProperty.Value

    foreach ($function in $fileData.functions) {
        # 我们只关心有任何类型活动的函数
        if (($function.n_mallocs -gt 0) -or ($function.n_cpu_percent_python -gt 0) -or ($function.n_cpu_percent_c -gt 0)) {
            $allFunctions.Add([PSCustomObject]@{
                File              = $fileName
                Function          = $function.line
                Line              = $function.lineno
                Growth_MB         = [Math]::Round($function.n_growth_mb, 6)
                Allocated_MB      = [Math]::Round($function.n_malloc_mb, 6)
                Allocations       = $function.n_mallocs
                PeakMem_MB        = [Math]::Round($function.n_peak_mb, 6)
                Python_CPU_Pct    = [Math]::Round($function.n_cpu_percent_python, 6)
                Native_CPU_Pct    = [Math]::Round($function.n_cpu_percent_c, 6)
                System_CPU_Pct    = [Math]::Round($function.n_sys_percent, 6)
                Total_CPU_Pct     = [Math]::Round($function.n_cpu_percent_python + $function.n_cpu_percent_c, 6)
                Copy_Volume_MB_s  = [Math]::Round($function.n_copy_mb_s, 6)
            })
        }
    }
}

Write-Host "数据提取完毕。共分析了 $fileCount 个文件，发现 $($allFunctions.Count) 个有活动的函数。"
Write-Host ""

# --- 3. 生成详细的卡片式报告 ---
Write-Host "--- ========== 详细函数性能报告卡 ========== ---" -ForegroundColor Yellow
Write-Host "将为每一个有活动的函数生成独立的报告卡片..."
Write-Host "注意：任何非零的 'Growth (MB)' 值都将被标红，这可能是内存泄漏的信号！"
Write-Host ""

if ($allFunctions.Count -eq 0) {
    Write-Host "在分析期间未检测到任何函数活动。" -ForegroundColor Yellow
} else {
    # 按总 CPU 占用排序，以便先查看最耗费资源的部分
    $sortedFunctions = $allFunctions | Sort-Object -Property Total_CPU_Pct -Descending

    foreach ($func in $sortedFunctions) {
        Write-Host "------------------------------------------------------------" -ForegroundColor DarkGray
        Write-Host "Function: " -NoNewline; Write-Host $func.Function -ForegroundColor White
        Write-Host "File:     " -NoNewline; Write-Host $func.File -ForegroundColor White
        Write-Host "Line:     " -NoNewline; Write-Host $func.Line -ForegroundColor White
        Write-Host ""

        Write-Host "  --- Memory Metrics ---" -ForegroundColor Cyan
        
        # 智能高亮内存增长
        $growthColor = if ($func.Growth_MB -gt 0) { "Red" } else { "White" }
        Write-Host "  Growth (MB):      " -NoNewline; Write-Host $func.Growth_MB -ForegroundColor $growthColor
        
        Write-Host "  Allocated (MB):   " -NoNewline; Write-Host $func.Allocated_MB -ForegroundColor White
        Write-Host "  Allocations:      " -NoNewline; Write-Host $func.Allocations -ForegroundColor White
        Write-Host "  Peak Memory (MB): " -NoNewline; Write-Host $func.PeakMem_MB -ForegroundColor White
        Write-Host "  Copy Volume (MB/s):" -NoNewline; Write-Host $func.Copy_Volume_MB_s -ForegroundColor White
        Write-Host ""

        Write-Host "  --- CPU Metrics ---" -ForegroundColor Cyan
        Write-Host "  Python CPU %:     " -NoNewline; Write-Host $func.Python_CPU_Pct -ForegroundColor White
        Write-Host "  Native CPU %:     " -NoNewline; Write-Host $func.Native_CPU_Pct -ForegroundColor White
        Write-Host "  System CPU %:     " -NoNewline; Write-Host $func.System_CPU_Pct -ForegroundColor White
        Write-Host "  Total CPU %:      " -NoNewline; Write-Host $func.Total_CPU_Pct -ForegroundColor Magenta
        Write-Host ""
    }
}


# --- 4. 生成多维度 Top 5 总结报告 ---
Write-Host "--- ========== 多维度 Top 5 总结 ========== ---" -ForegroundColor Yellow
Write-Host "以下是各项指标中问题最突出的前 5 个函数"
Write-Host ""

# 按内存增长排序
Write-Host "--- Top 5 by Memory Growth (MB) ---" -ForegroundColor Green
$allFunctions | Where-Object { $_.Growth_MB -gt 0 } | Sort-Object -Property Growth_MB -Descending | Select-Object -First 5 | Format-Table -AutoSize

# 按内存分配排序
Write-Host "--- Top 5 by Memory Allocated (MB) ---" -ForegroundColor Green
$allFunctions | Sort-Object -Property Allocated_MB -Descending | Select-Object -First 5 | Format-Table -AutoSize

# 按总CPU占用排序
Write-Host "--- Top 5 by Total CPU Time (%) ---" -ForegroundColor Green
$allFunctions | Sort-Object -Property Total_CPU_Pct -Descending | Select-Object -First 5 | Format-Table -AutoSize


# --- 脚本结束 ---